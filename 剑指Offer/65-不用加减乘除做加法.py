'''
题目：写一个函数，求两个整数之和，要求在函数体内不得使用＋、－、×、÷四则运算符号。
'''
'''
主要利用异或运算来完成，异或运算有一个别名叫做：不进位加法，那么a ^ b就是a和b相加之后，该进位的地方不进位的结果，
然后下面考虑哪些地方要进位，自然是a和b里都是1的地方，a & b就是a和b里都是1的那些位置，a & b << 1就是进位 之后的结果。
所以：a + b = (a ^ b) + (a & b << 1)
令a' = a ^ b, b' = (a & b) << 1，可以知道，这个过程是在模拟加法的运算过程，进位不可能，一直持续，所以b最终会变为0。
因此重复做上述操作就可以求得a + b的值。
'''


class Solution:
    def add(self, num1, num2):
        while num2 != 0:
            num1, num2 = (num1 ^ num2) & 0xffffffff, (num1 & num2) << 1
        return num1
